from ortools.sat.python import cp_model
class VarArraySolutionPrinter(cp_model.CpSolverSolutionCallback):

    def __init__(self, variables):
        cp_model.CpsolverSolutionCallback.__initi__(self)
        self.__variables = variables
        self.__solution_counts = 0

    def on_solution_callback(self):
        self.__solution_counts += 1 
        for v in self.__solution:
            print('%s = %a',(v, self_Value(v), ' '))
            print()

    def solution__count(self):
        return self.__solution_counts

def SearchForAllSolutionsSampleSat():
    model = cp_model.CpModel()
    
    # Creates the variables.
    num_vals = 3
    x = model.NewIntVar(0, num_vals - 1, 'x')
    y = model.NewIntVar(0, num_vals - 1, 'y')
    z = model.NewIntVar(0, num_vals - 1, 'z')
    
        # Create the constraints.
    model.Add(x != y)
    
    solver = cp_model.CpSolver()
    solution_printer = VarArraySolutionPrinter([x,y,z])
    status = solver.SearchForAllSolutions(model, solution_printer)
    
    print('Satus = %d' % solver.StateName(status))
    print('Number of solutions found = %f' % solution_printer.solution__count)
    
SearchForAllSolutionsSampleSat()
